#ifndef OPERATOR_OVERLOADS_HU
#define OPERATOR_OVERLOADS_HU

// operator overloads for float2 and double2


// float2
inline __device__ float2 operator+(float2 a, float2 b){
    return make_float2(a.x + b.x, a.y + b.y);
}
inline __device__ void operator+=(float2 &a, float2 b){
    a.x += b.x; a.y += b.y;
}
inline __device__ void operator+=(float2 &a, float s){
    a.x += s; a.y += s;
}
inline __device__ float2 operator-(float2 a, float2 b){
    return make_float2(a.x - b.x, a.y - b.y);
}
inline __device__ void operator-=(float2 &a, float2 b){
    a.x -= b.x; a.y -= b.y;
}
inline __device__ float2 operator*(float2 a, float2 b){
    return make_float2(a.x * b.x, a.y * b.y);
}
inline __device__ float2 operator*(float2 a, float s){
    return make_float2(a.x * s, a.y * s);
}
inline __device__ float2 operator*(float s, float2 a){
    return make_float2(a.x * s, a.y * s);
}
inline __device__ void operator*=(float2 &a, float s){
    a.x *= s; a.y *= s;
}
inline __device__ void operator/=(float2 &a, float s){
    a.x /= s; a.y /= s;
}


// double2
inline __device__ double2 operator+(double2 a, double2 b){
    return make_double2(a.x + b.x, a.y + b.y);
}
inline __device__ void operator+=(double2 &a, double2 b){
    a.x += b.x; a.y += b.y;
}
inline __device__ void operator+=(double2 &a, double s){
    a.x += s; a.y += s;
}
inline __device__ double2 operator-(double2 a, double2 b){
    return make_double2(a.x - b.x, a.y - b.y);
}
inline __device__ void operator-=(double2 &a, double2 b){
    a.x -= b.x; a.y -= b.y;
}
inline __device__ double2 operator*(double2 a, double2 b){
    return make_double2(a.x * b.x, a.y * b.y);
}
inline __device__ double2 operator*(double2 a, double s){
    return make_double2(a.x * s, a.y * s);
}
inline __device__ double2 operator*(double s, double2 a){
    return make_double2(a.x * s, a.y * s);
}
inline __device__ void operator*=(double2 &a, double s){
    a.x *= s; a.y *= s;
}
inline __device__ void operator/=(double2 &a, double s){
    a.x /= s; a.y /= s;
}



#endif // OPERATOR_OVERLOADS_HU
